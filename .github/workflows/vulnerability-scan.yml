# ⁠Pipeline to run vulnerability scans when PR is opened
# For vulnerabilities scanning, we are going to use Trivy -> https://github.com/marketplace/actions/aqua-security-trivy
name: Vulnerability Scans
run-name: Vulnerability Scans
# We are defining permissions for this workflow to upload the scan results to the GitHub Security tab
permissions:
  contents: read
  security-events: write
on:
  # We are only going to trigger this workflow using status check of a PR
  # When a PR is opened, this workflow will be triggered and if the status check passes, the PR can be merged
  pull_request:
    types:
      - opened
      # reopened is used to trigger the workflow when a PR is reopened
      # When a new commit is pushed to the PR while it is opened the workflow will not be triggered
      # The PR has to be reopened for the workflow to be triggered
      - reopened
    branches:
      - main
  workflow_dispatch:
jobs:
  fsScan:
    name: File System Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner 
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "fs"
          scanners: 'vuln'
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-fs-scan-results.sarif"
          severity: "CRITICAL"
          skip-dirs: "./node_modules"
       

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-fs-scan-results.sarif"
        


  imageScan:
    needs: fsScan
    name: Build the Docker Image and Scan Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build and tag the Docker image
        run: |
          # Build a docker image locally called status-check
          docker build . -t status-check
      - name: Image Vulnerability Scan with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          # You can't directly use $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG here
          image-ref: status-check
          scan-type: "image"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-image-scan-results.sarif"
          severity: "CRITICAL"

        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image-scan-results.sarif"